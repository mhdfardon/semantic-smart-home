package fr.liris.smarthome.model;

// Generated Jan 14, 2013 12:41:23 AM by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlRootElement;

import org.synyx.hades.domain.Persistable;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "student")
@XmlRootElement
public class Student implements java.io.Serializable, Persistable<Long> {

	/**
	 * 
	 */
	private static final long serialVersionUID = -472421046753892317L;

	public Student(Long studentId, String studentNumber, String firstName,
			String lastName, String email, String motif,
			String langagesProgrammation) {
		this.studentId = studentId;
		this.studentNumber = studentNumber;
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
		this.motif = motif;
		this.langagesProgrammation = langagesProgrammation;
	}

	private Long studentId;
	private String studentNumber;
	private String firstName;
	private String lastName;
	private String email;
	private String motif;
	private String langagesProgrammation;
	private Set<Formation> formations = new HashSet<Formation>(0);
	private byte[] password;

	public Student() {
	}
	
	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "STUDENT_ID", unique = true, nullable = false)
	public Long getId() {
		return this.studentId;
	}

	public void setId(Long id) {
		this.studentId = id;
	}

	@Column(name = "STUDENT_NUMBER", length = 10)
	public String getStudentNumber() {
		return studentNumber;
	}

	public void setStudentNumber(String studentNumber) {
		this.studentNumber = studentNumber;
	}

	@Column(name = "FIRST_NAME", length = 45)
	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "LAST_NAME", length = 45)
	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Column(name = "EMAIL", length = 100)
	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "MOTIF", length = 200)
	public String getMotif() {
		return motif;
	}

	public void setMotif(String motif) {
		this.motif = motif;
	}

	@Column(name = "LANGAGES_PROGRAMMATION", length = 200)
	public String getLangagesProgrammation() {
		return langagesProgrammation;
	}

	public void setLangagesProgrammation(String langagesProgrammation) {
		this.langagesProgrammation = langagesProgrammation;
	}

	@ManyToMany(fetch = FetchType.EAGER, cascade=CascadeType.REMOVE)
	@JoinTable(name = "STUDENT_HAS_FORMATION", joinColumns = { @JoinColumn(name = "STUDENT_ID",
	nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "FORMATION_ID", 
	nullable = false, updatable = false) })	
	@OrderBy("formationName")
	public Set<Formation> getFormations() {
		return formations;
	}

	public void setFormations(Set<Formation> formations) {
		this.formations = formations;
	}

	/**
	 * @return the password
	 */
	@Column(name = "PASSWORD")
	public byte[] getPassword() {
		return this.password;
	}

	/**
	 * @param password the password to set
	 */
	public void setPassword(byte[] password) {
		this.password = password;
	}

	@Transient
	public boolean isNew() {
		return null == this.getId();
	}
	
	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("Student [studentId=").append(studentId)
		.append(", studentNumber=").append(studentNumber)
		.append(", firstName=").append(firstName).append(", lastName=")
		.append(lastName).append(", email=").append(email)
		.append(", motif=").append(motif).append(", formations=")
		.append(formations).append("]");
		return builder.toString();
	}
}