package fr.liris.cci.model;

// Generated 28 oct. 2010 09:48:05 by Hibernate Tools 3.2.4.GA

import static javax.persistence.GenerationType.IDENTITY;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;
import org.synyx.hades.domain.Persistable;

/**
 * Planning generated by hbm2java
 */
@Entity
@Table(name = "PLANNING")
public class Planning implements java.io.Serializable, Persistable<Integer> {

	private static final long serialVersionUID = -4202247640336256119L;
	
	/**
	 * Identifiant du planning
	 */
	private Integer planningId;
	
	/**
	 * Nom du planning
	 */
	private String name;
	
	/**
	 * Description du planning
	 */
	private String description;
	
	/**
	 * L'ensemble des periodes du planning
	 */
	private Set<Period> periods = new HashSet<Period>(0);
	
	/**
	 * Son associe au planning
	 */
//	private Sound planningSound;
	
	/**
	 * representation textuelle du planning
	 */
	private String trace;
	
	@Transient
	public boolean isNew() {
		return null == this.getId();
	}
	
	/**
	 * @return the planningId
	 */
	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "PLANNING_ID", unique = true, nullable = false)
	public Integer getId() {
		return this.planningId;
	}

	/**
	 * @param planningId the planningId to set
	 */
	public void setId(Integer planningId) {
		this.planningId = planningId;
	}

	/**
	 * @return the name
	 */
	@Column(name = "NAME", nullable = false, length = 50)
	public String getName() {
		return this.name;
	}

	/**
	 * @param name the name to set
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * @return the description
	 */
	@Column(name = "DESCRIPTION", length = 50)
	public String getDescription() {
		return this.description;
	}

	/**
	 * @param description the description to set
	 */
	public void setDescription(String description) {
		this.description = description;
	}
	
//	@ManyToOne(fetch=FetchType.LAZY)
//    @JoinColumn(name="SOUND_KEY", nullable = true)
//    public Sound getPlanningSound() {
//        return this.planningSound;
//    }
//    
//    public void setPlanningSound(Sound planningSound) {
//        this.planningSound = planningSound;
//    }	

	/**
	 * @return the periods
	 */
	@ManyToMany(fetch = FetchType.LAZY, cascade=CascadeType.REMOVE)
	@JoinTable(name = "PLANNING_HAS_PERIOD", joinColumns = { @JoinColumn(name = "PLANNING_ID", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "PERIOD_ID", nullable = false, updatable = false) })	
	public Set<Period> getPeriods() {
		return this.periods;
	}

	/**
	 * @param periods the periods to set
	 */
	public void setPeriods(Set<Period> periods) {
		this.periods = periods;
	}

	/**
	 * @return the soundConstraints
	 */
//	@OneToMany(fetch=FetchType.LAZY, mappedBy="planning", cascade=CascadeType.REMOVE)
//    public Set<SoundConstraint> getSoundConstraints() {
//        return this.soundConstraints;
//    }
//
//	/**
//	 * @param soundConstraints the soundConstraints to set
//	 */
//    public void setSoundConstraints(Set<SoundConstraint> soundConstraints) {
//        this.soundConstraints = soundConstraints;
//    } 

	/**
	 * @return the weeklyWorkdays
	 */
//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "planning", cascade=CascadeType.REMOVE)
//	//Attention : Annotation Hibernate
//	@Sort(type = SortType.COMPARATOR, comparator = WorkdayComparator.class)
//	public Set<WeeklyWorkday> getWeeklyWorkdays() {
//		return this.weeklyWorkdays;
//	}
//
//	/**
//	 * @param weeklyWorkdays the weeklyWorkdays to set
//	 */
//	public void setWeeklyWorkdays(Set<WeeklyWorkday> weeklyWorkdays) {
//		this.weeklyWorkdays = weeklyWorkdays;
//	}

	/**
	 * @return the nodes
	 */
//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "planning")
//	public Set<GenericNode> getNodes() {
//		return this.nodes;
//	}
//
//	/**
//	 * @param nodes the nodes to set
//	 */
//	public void setNodes(Set<GenericNode> nodes) {
//		this.nodes = nodes;
//	}
	
	/**
	 * @param trace the trace to set
	 */
	public void setTrace(String trace) {
		this.trace = trace;
	}

	/**
	 * @return the trace
	 */
	@Column(name = "TRACE", nullable = true, columnDefinition = "TEXT")
	public String getTrace() {
		return trace;
	}
	
	/**
	 * Constructeur par defaut
	 */
	public Planning() {
	}

	/**
	 * Constructeur partiel
	 * 
	 * @param name Le nom du planning
	 */
	public Planning(String name) {
		this.name = name;
	}

	/**
	 * Constructeur complet
	 * 
	 * @param name Le nom du planning
	 * @param description La description du planning
	 * @param periods L'ensemble des periodes du planning
	 * @param weeklyWorkdays L'ensemble des jours de la semaine pour ce planning (maximum 7 et pas de doublons)
	 * @param nodes Les noeuds ayant ce planning
	 */
	public Planning(String name, String description, Set<Period> periods) { 
//			Set<WeeklyWorkday> weeklyWorkdays, Set<GenericNode> nodes) {
		this.name = name;
		this.description = description;
		this.periods = periods;
//		this.weeklyWorkdays = weeklyWorkdays;
//		this.nodes = nodes;
	}
	
	@Override
    public String toString() {
		return new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE).
			append("planningId", this.planningId).
			append("name", this.name).
			append("description", this.description).
			toString();
    }
}
